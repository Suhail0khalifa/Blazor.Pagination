<style>
</style>

@if (PageCount > 1)
{
    <ul class="pagination justify-content-end">
        @if (ShowFirstLast)
        {
            if (CurrentPage == 1)
            {
        <li class="page-item disabled"><a class="page-link" href tabindex="-1"><span aria-hidden="true">&laquo;</span><span class="sr-only">@FirstText</span></a></li>
            }
            else
            {
        <li class="page-item"><a class="page-link" href onclick="@(async () => await PagerButtonClicked(1))"><span aria-hidden="true">&laquo;</span><span class="sr-only">@FirstText</span></a></li>
            }
        }
        @if (HasPrevious)
        {
        <li class="page-item"><a class="page-link" onclick="@(async () => await PagerButtonClicked(CurrentPage - 1))"><span aria-hidden="true">@PreviousText</span><span class="sr-only">Go to previous page</span></a></li>
        }
        else
        {
        <li class="page-item disabled"><a class="page-link" href="#" tabindex="-1"><span aria-hidden="true">@PreviousText</span><span class="sr-only">Go to previous page</span></a></li>
        }
        @if (ShowPageNumbers)
        {
            for (var i = Start; i <= Finish; i++)
            {
                var currentIndex = i;
                if (i == CurrentPage)
                {
        <li class="page-item active"><a class="page-link">@i</a></li>
                }
                else
                {
        <li class="page-item"><a class="page-link btn btn-link" onclick="@(async () => await PagerButtonClicked(currentIndex))">@currentIndex</a></li>
                }
            }
        }
        @if (HasNext)
        {
        <li class="page-item"><a class="page-link btn btn-link" onclick="@(async () => await PagerButtonClicked(CurrentPage + 1))"><span aria-hidden="true">@NextText</span><span class="sr-only">Go to next page</span></a></li>
        }
        else
        {
        <li class="page-item disabled"><a class="page-link" href="#" tabindex="-1"><span aria-hidden="true">@NextText</span><span class="sr-only">Go to next page</span></a></li>
        }
        @if (ShowFirstLast)
        {
            if (CurrentPage == PageCount)
            {
        <li class="page-item disabled"><a class="page-link" href="#" tabindex="-1"><span aria-hidden="true">@LastText</span><span class="sr-only">>Go to last page</span></a></li>
            }
            else
            {
        <li class="page-item"><a class="page-link btn btn-link" onclick="@(async () => await PagerButtonClicked(PageCount))"><span aria-hidden="true">@LastText</span><span class="sr-only">Go to last page</span></a></li>
            }
        }
    </ul>
}

@functions {
[Parameter]
private int PageCount{ get; set; }

[Parameter]
private int CurrentPage{ get; set; }

[Parameter]
private Func<int, Task> OnPageChanged { get; set; } = null;

[Parameter]
private bool ShowFirstLast { get; set; } = false;

[Parameter]
private bool ShowPageNumbers { get; set; } = true;

[Parameter]
private string FirstText { get; set; } = "First";

[Parameter]
private string LastText { get; set; } = "Last";

[Parameter]
private string PreviousText { get; set; } = "Previous";

[Parameter]
private string NextText { get; set; } = "Next";

[Parameter]
private int VisiblePages { get; set; } = 5;

private int Start { get; set; }
private int Finish { get; set; }


protected override void OnParametersSet()
{
    var half = (int)Math.Floor(VisiblePages / 2d);
    Start = Math.Max(CurrentPage - half, 1);
    Finish = Math.Min(CurrentPage + half, PageCount);
    VisiblePages = Math.Min(VisiblePages, PageCount);
    if (Start == 1)
    { Finish = VisiblePages; }
    if (Finish >= PageCount)
    { Start = PageCount - VisiblePages; }
    base.OnParametersSet();
}

private bool HasPrevious => CurrentPage > 1 && PageCount > 1;
private bool HasNext => CurrentPage < PageCount;

private async Task PagerButtonClicked(int page)
{
    await OnPageChanged?.Invoke(page);
}
}
