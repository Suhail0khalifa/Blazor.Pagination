<style>
</style>

@if (Result.PageCount > 1)
{
    <ul class="pagination justify-content-end">
        @if (HasFirst)
        {
            if (Result.CurrentPage == 1)
            {
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">First</span>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a class="page-link" onclick="@(async () => await PagerButtonClicked(1))"
                       style="color: #007bff; text-decoration: none; background-color: transparent;">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">First</span>
                    </a>
                </li>
            }
        }
        @if (HasPrevious)
        {
            <li class="page-item">
                <a class="page-link" onclick="@(async () => await PagerButtonClicked(Result.CurrentPage - 1))"
                   style="color: #007bff; text-decoration: none; background-color: transparent;">
                    <span aria-hidden="true">&lsaquo;</span>
                    <span class="sr-only">Previous</span>
                </a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1">
                    <span aria-hidden="true">&lsaquo;</span>
                    <span class="sr-only">Previous</span>
                </a>
            </li>
        }
        @for (var i = Start; i <= Finish; i++)
        {
            var currentIndex = i;
            if (i == Result.CurrentPage)
            {
                <li class="page-item active">
                    <a class="page-link">@i</a>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a class="page-link" onclick="@(async () => await PagerButtonClicked(currentIndex))"
                       style="color: #007bff; text-decoration: none; background-color: transparent;">@currentIndex</a>
                </li>
            }
        }
        @if (HasNext)
        {
            <li class="page-item">
                <a class="page-link" onclick="@(async () => await PagerButtonClicked(Result.CurrentPage + 1))"
                   style="color: #007bff; text-decoration: none; background-color: transparent;">
                    <span aria-hidden="true">&rsaquo;</span>
                    <span class="sr-only">Next</span>
                </a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1">
                    <span aria-hidden="true">&rsaquo;</span>
                    <span class="sr-only">Next</span>
                </a>
            </li>
        }
        @if (HasLast)
        {
            if (Result.CurrentPage == Result.PageCount)
            {
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1">
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only">Last</span>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a class="page-link" onclick="@(async () => await PagerButtonClicked(Result.PageCount))"
                       style="color: #007bff; text-decoration: none; background-color: transparent;">
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only">Last</span>
                    </a>
                </li>
            }
        }
    </ul>
}

@functions {
[Parameter]
private BlazorPagination.PagedResultBase Result { get; set; }

[Parameter]
private Func<int, Task> PageChanged { get; set; }

[Parameter]
private bool HasFirst { get; set; } = true;

[Parameter]
private bool HasLast { get; set; } = true;

[Parameter]
private int VisiblePages { get; set; } = 5;

private int Start { get; set; }
private int Finish { get; set; }


protected override void OnParametersSet()
{
    var half = (int)Math.Floor(VisiblePages / 2d);
    Start = Math.Max(Result.CurrentPage - half, 1);
    Finish = Math.Min(Result.CurrentPage + half, Result.PageCount);
    VisiblePages = Math.Min(VisiblePages, Result.PageCount);
    if (Start == 1)
        Finish = VisiblePages;
    if (Finish >= Result.PageCount)
        Start = Result.PageCount - VisiblePages;
    base.OnParametersSet();
}

private bool HasPrevious => Result.CurrentPage > 1 && Result.PageCount > 1;
private bool HasNext => Result.CurrentPage < Result.PageCount;

private async Task PagerButtonClicked(int page)
{
    await PageChanged?.Invoke(page);
}
}
