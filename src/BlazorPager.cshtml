<style>
</style>

@if (Result.PageCount > 1)
{
    <ul class="pagination justify-content-end">
        @if (ShowFirstLast)
        {
            if (Result.CurrentPage == 1)
            {
        <li class="page-item disabled"><a class="page-link" href tabindex="-1"><span aria-hidden="true">&laquo;</span><span class="sr-only">@FirstText</span></a></li>
            }
            else
            {
        <li class="page-item"><a class="page-link" href onclick="@(async () => await PagerButtonClicked(1))"><span aria-hidden="true">&laquo;</span><span class="sr-only">@FirstText</span></a></li>
            }
        }
        @if (HasPrevious)
        {
        <li class="page-item"><a class="page-link" onclick="@(async () => await PagerButtonClicked(Result.CurrentPage - 1))"><span aria-hidden="true">@PreviousText</span><span class="sr-only">Go to previous page</span></a></li>
        }
        else
        {
        <li class="page-item disabled"><a class="page-link" href="#" tabindex="-1"><span aria-hidden="true">@PreviousText</span><span class="sr-only">Go to previous page</span></a></li>
        }
        @if (ShowPageNumbers)
        {
            for (var i = Start; i <= Finish; i++)
            {
                var currentIndex = i;
                if (i == Result.CurrentPage)
                {
        <li class="page-item active"><a class="page-link">@i</a></li>
                }
                else
                {
        <li class="page-item"><a class="page-link btn btn-link" onclick="@(async () => await PagerButtonClicked(currentIndex))">@currentIndex</a></li>
                }
            }
        }
        @if (HasNext)
        {
        <li class="page-item"><a class="page-link btn btn-link" onclick="@(async () => await PagerButtonClicked(Result.CurrentPage + 1))"><span aria-hidden="true">@NextText</span><span class="sr-only">Go to next page</span></a></li>
        }
        else
        {
        <li class="page-item disabled"><a class="page-link" href="#" tabindex="-1"><span aria-hidden="true">@NextText</span><span class="sr-only">Go to next page</span></a></li>
        }
        @if (ShowFirstLast)
        {
            if (Result.CurrentPage == Result.PageCount)
            {
        <li class="page-item disabled"><a class="page-link" href="#" tabindex="-1"><span aria-hidden="true">@LastText</span><span class="sr-only">>Go to last page</span></a></li>
            }
            else
            {
        <li class="page-item"><a class="page-link btn btn-link" onclick="@(async () => await PagerButtonClicked(Result.PageCount))"><span aria-hidden="true">@LastText</span><span class="sr-only">Go to last page</span></a></li>
            }
        }
    </ul>
}

@functions {
[Parameter]
private BlazorPagination.PagedResultBase Result { get; set; }

[Parameter]
private Func<int, Task> OnPageChanged { get; set; }

[Parameter]
private bool ShowFirstLast { get; set; } = false;

[Parameter]
private bool ShowPageNumbers { get; set; } = true;

[Parameter]
private string FirstText { get; set; } = "First";

[Parameter]
private string LastText { get; set; } = "Last";

[Parameter]
private string PreviousText { get; set; } = "Previous";

[Parameter]
private string NextText { get; set; } = "Next";

[Parameter]
private int VisiblePages { get; set; } = 5;

private int Start { get; set; }
private int Finish { get; set; }


protected override void OnParametersSet()
{
    var half = (int)Math.Floor(VisiblePages / 2d);
    Start = Math.Max(Result.CurrentPage - half, 1);
    Finish = Math.Min(Result.CurrentPage + half, Result.PageCount);
    VisiblePages = Math.Min(VisiblePages, Result.PageCount);
    if (Start == 1)
        Finish = VisiblePages;
    if (Finish >= Result.PageCount)
        Start = Result.PageCount - VisiblePages;
    base.OnParametersSet();
}

private bool HasPrevious => Result.CurrentPage > 1 && Result.PageCount > 1;
private bool HasNext => Result.CurrentPage < Result.PageCount;

private async Task PagerButtonClicked(int page)
{
    await OnPageChanged?.Invoke(page);
}
}
